import torch
import torch.nn as nn
import torch.nn.functional as F

class createModel(nn.Module):
  def __init__(self):
    super(createModel, self).__init__()
    self.layer1 = nn.Sequential(
        nn.Conv2d(1, 8, kernel_size=3, stride=1, padding=1), # 輸入通道數(圖片通道)  卷積核的數量(輸出通道數)  卷積核的大小(卷積核的長寬是 3x3)  卷積的步長(卷積核在每次移動時移動的像素數) 在輸入圖片的周圍加上多少像素的 0 填充，以保證輸出圖片的大小和輸入圖片的大小相同
        nn.BatchNorm2d(8),
        nn.ReLU(),
        nn.MaxPool2d(kernel_size=2, stride=2))
    self.layer2 = nn.Sequential(
        nn.Conv2d(8, 16, kernel_size=3, stride=1, padding=1),
        nn.BatchNorm2d(16),
        nn.ReLU(),
        nn.MaxPool2d(kernel_size=2, stride=2))
    self.fc = nn.Sequential(
        nn.Linear(16 * 32 * 32, 128), # 128x128
        # nn.Linear(16 * 64 * 64, 128), # 256x256
        nn.ReLU(),
        nn.Linear(128, 1),
        nn.Sigmoid())

  def forward(self, x):
    out = self.layer1(x)
    out = self.layer2(out)
    out = out.view(out.size(0), -1)
    out = self.fc(out)
    return out